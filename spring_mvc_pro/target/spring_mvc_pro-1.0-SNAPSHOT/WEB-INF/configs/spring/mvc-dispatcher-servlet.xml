<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--向spring容器中注入@Autowired @Resource @PostConstruct @PreDestory 4个注解对应的beanPostProcessor -->
    <!--<context:annotation-config/>-->

    <!--<context:component-scan>标签的作用包含了<context:annotation-config/>的功能
        并且会开启自动的组件扫描功能扫描basepackage属性指定的包路径。
        当两个标签都配置在xml文件中时，只有后者会起作用-->
    <context:component-scan base-package="com.lzg.mvcdemo">
        <!--context:include-filter只扫描配置的包-->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--扩展注解驱动， 可以将request参数绑定到controller参数上 -->
    <mvc:annotation-driven/>

    <!--静态资源处理，css,js,imgs...-->
    <mvc:resources mapping="/resources/**" location="/"/>
    <!--web.xml配置的映射拦截路径 springmvc 为“/”，springmvc会拦截所有的web容器的请求，包括静态资源的请求-->
    <!-- default-servlet-handler：对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理 -->
    <mvc:default-servlet-handler/>

    <!--配置ViewResolver.可以用多个ViewResolver,使用order排序。InternalResourceViewResolver放在最后-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
</beans>